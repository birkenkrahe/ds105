#+title: Introduction to data science - notebook
#+author: Marcus Birkenkrahe
#+subtitle: Lyon College - DSC 105 - fall 2023
#+startup: overview inlineimages indent hideblocks
#+property: header-args:R :results output :session *R* :noweb yes
* README

- See also whiteboard screenshots ([[https://drive.google.com/drive/folders/16Z3Lt_RBMnRMwORqZDfGMUezy-_B9huB?usp=sharing][GDrive]]).
- Includes further reading, watching and comments

* DONE Part I: Basics
** 1.1 Wed-23-Aug

Summary:
- introductory stuff on data science
- project management methodology
- information on the data science major and minor

Review questions:
1. What is the purpose of Scrum?
2. What is an example for a potential term project?
3. What are the dominant languages in data science?

** 1.2 Fri-25-Aug

- Literate programming: tangle and weave and markup commands
- Textbook selection to learn beginning and advanced R
- Ways to develop and run R programs locally and online
- What's special about R ("Adventures in R" article)
- Loading, viewing and plotting a data frame in R

*** Week 1 review

1. What is data science?
   #+begin_quote
   - Use data to better describe the present, predict or prescribe the
     future.
   - Interdisciplinary field that uses algorithms, data and math to
     extract insights from structured and unstructured data.
   - The "sexiest job of the 21st century"
   #+end_quote
2. Is the [[https://www.tesmanian.com/blogs/tesmanian-blog/elon-musk-shows-fsd-beta-v12-live-test-drive-on-x][Tesla test drive with Elon Musk]] (Aug 26, 2023) an example
   for a "data science application"?
3. Describe the data science workflow.
   #+begin_quote
   1) Data collection and storage  [data import]
   2) Data preparation [data wrangling]
   3) Data exploration and visualization [data modeling]
   4) Experimentation and prediction [+ data storytelling]

   [[https://www.datacamp.com/blog/what-is-data-science-the-definitive-guide?irclickid=0a2UQaStbxyNWhXRYE2FCwsmUkFyUrU-NVpDxo0&irgwc=1&utm_medium=affiliate&utm_source=impact&utm_campaign=000000_1-1310690_2-mix_3-all_4-na_5-na_6-na_7-mp_8-affl-ip_9-na_10-bau_11-Admitad%20-%201310690&utm_content=TEXT_LINK&utm_term=442763][From the DataCamp blog:]]
   #+attr_latex: :width 400px
   [[../img/datascience.png]]
   #+end_quote
4. What does 'deep learning' refer to?
   #+begin_quote
   A subfield of machine learning, which relies on large
   (i.e. multi-layered) neural networks.
   #+attr_latex: :width 400px
   [[../img/gpt.png]]
   #+end_quote
5. Which job roles exist in data science and what do they mean?
   #+begin_quote
   1. Data wrangling: data engineer (SQL, cloud, Linux)
   2. Data analytics: data analyst (SQL, R, dashboards)
   3. Data modeling: data scientist (R, SQL, stats, machine learning)
   4. Deep learning: ML scientist (NLP, LLMs, Python > R)
   #+end_quote
6. Which ways do you know to program and run R?
   #+begin_quote
   - As a shell from the command line with ~R~ (or ~Rterm~)
   - As a REPL in replit.com (editor, console, terminal, PDF)
   - As an IDE with the command ~Rgui~ on your PC
   - As an IDE with RStudio on your PC or in the cloud
   - As an IDE in Emacs + ESS + Org-mode (advanced only)
   #+end_quote
7. What's special about R?
   #+begin_quote
   - Statistical programming language with great graphics
   - Open source and easy to expand
   - Easy to learn especially for non-technical people
   - Large community
   #+end_quote
8. Which R functions do you remember? (6)
   #+begin_example R
   data
   ls()
   help
   head
   plot
   q[uit]()
   #+end_example
9. What is the "formula" notation?
   #+begin_quote
   Refers to the use of ~~~ for x and y arguments in certain R functions
   like ~plot~ where you can call ~plot(x,y)~ or ~plot(y~x)~.
   #+end_quote
10. When can you connect the points in a scatterplot?
    #+begin_quote
    When the points are ordered in some way - for example when the
    data represent a time series (see ~Nile~).
    #+end_quote

*** Week 2 preview

- Datacamp Workspace: simple and extended example.
- Exercise: import, view and plot the ~Nile~ data.
- Lecture: What is data science?

*** Test 1 is live (complete by Sept 3, 11:59 pm)

- The test is available online, you've got 30 minutes
- It's an open book test: use any help you can get
- Gradebook in Canvas is updated automatically

** 2.1 Mon-28-Aug

- DataCamp review: data pipeline; job roles in data science
- Simple ~mtcars~ example in DataCamp workspace.
- Parameters in R functions, e.g. ~n~ in ~head(data, n=3)~.
- Plotting ~Nile~ data with ~plot(Nile)~ produces a line plot, choosing
  the parameter ~type="p"~ changes it to a scatterplot.
- Computing a trendline through points using ~lm~ (linear regression
  model), and drawing a colored line with ~abline~.

** 2.2 Wed-30-Aug

- For the first sprint review, try to identify a topic and/or a
  dataset, and work through the criteria of the Canvas assignment.
- ~plot()~ is an example of a 'generic function' - no matter what data
  structures or types you throw at it, it'll produce a plot.
- In DataCamp workspace, you can edit your notebook using Jupyter Lab:
  this gives you access to a launcher with file editor and a terminal;
  you can now create a .R file in the editor, and run it with ~Rterm~ in
  the terminal.
- The notebook has text cells, which allow insertion of links and
  images using markup notation.

** 2.3 Fri-1-Sep

We worked with the Workspace Demo file [[https://tinyurl.com/WorkspaceDemoR][tinyurl.com/WorkspaceDemoR]].

- How to download a CSV file to the PC
- How to establish an absolute or relative path to the file (on PC)
- How to read the CSV file into a data frame
- How to store the data frame in a variable
- How to check the structure of the data frame
- How to extract values from the data frame
- How to extract unique values from a column vector
- How to use the AI notebook interface

** 3.1 Wed-6-Sep

- How to share notebook editing rights
- How to change values based on a pattern search with ~gsub~
- Function parameters in ~unique~ and ~read.csv~
- Adding your project idea to Canvas (pages)

** 3.2 Fri-8-Sep

*** Project sprint review coming up

- [[https://lyon.instructure.com/courses/1427/pages/sign-up-for-term-project][Sign up here!]]
- Another idea: DataCamp weekly datasets! ([[https://app.datacamp.com/workspace/overview][Example]])
  [[../img/weekly.png]]

*** Review DataCamp session

1) What's an event log, for example for web data? How many features
   does it have?
   #+begin_quote
   An identifier, a description of the event, and a timestamp
   #+end_quote
2) Open your R scratchbook, load these data into a dataframe and tell
   me how many columns and rows the data have - use only ONE line
   after downloading the file: [[https://tinyurl.com/flightEventLogCsv][tinyurl.com/flightEventLogCsv]]
   #+begin_src R
     str(read.csv("../data/flight_event_log.csv",header=TRUE))
   #+end_src
3) What can you do with the Twitter API?
   #+begin_quote
   Extract tweets from Twitter for further analysis or to build an
   application - here are [[https://techcrunch.com/2009/02/19/the-top-20-twitter-applications/][examples]] from the early days of X (2009).
   #+end_quote
4) Does OpenAI have an API? What could you do with it?
   #+begin_quote
   Yes, and you could use it to get access to ChatGPT and build an AI
   application ([[https://platform.openai.com/overview][overview]]).
   #+end_quote
5) Are social network data quantitative or qualitative data?
   #+begin_quote
   Can be both: number of people logging in (quantitative), or
   sentiments expressed in a social media post (qualitative). For
   computational (=numerical) analysis, you need to convert
   qualitative into quantitative data.
   #+end_quote
6) Is a social network graph like shown below an example of
   quantitative or qualitative data?
   #+attr_latex: :width 400px
   #+caption: https://www-cdn.nebula-graph.io/nebula-website-5.0/images/blogs/nebulagraph-sns/graph-database-on-social-network-03.jpeg
   [[../img/social_network_graph.jpeg]]
   #+begin_quote
   Both! the node image represents a quality (type of account), while
   the graph itself represents a collection of nodes or vertices and
   edges or links, which can be represented as an edge list:
   [(1,2),(2,3)] means that node 1 is connected with node 2 and node 2
   is connected with node 3.
   #+end_quote
7) What languages do you use to query databases?
   #+begin_quote
   NoSQL for document (graph) databases (Not-only-SQL), and SQL for
   relational (tabular) databases.
   #+end_quote
8) What's the top problem for data storage?
   #+begin_quote
   "Scaling": 3V (Volume, Velocity, Variety) definition of Big Data.
   #+end_quote
9) Could you tell the "smart home" case study after watching it?
   #+begin_quote
   What's the goal? To collect data from various sources to analyze
   usage patterns, detect anomalies, make maintenance predictions.

   1) Gather data using APIs for weather information (public), for
      tweets (commercial) and for sensor data (private).
   2) Transform data to fit a database format using e.g. [[https://airflow.apache.org/][Apache
      Airflow]]: pulls data from all sources at regular intervals,
      cleans the data and loads it into a database.
   #+end_quote
10) What does this case study illustrate?
    #+begin_quote
    The data pipeline: gather, transform, store data, and the
    availability of infrastructure to help with these.
    #+end_quote

*** Review test 1

1) You have loaded mtcars, saved ~mtcars~ in the variable ~data~ and
   loaded the ~Nile~ time series. What will ~ls()~ show in R?
   #+begin_src R :results output
     data(mtcars)
     data <- mtcars
     data(Nile)
     ls()
   #+end_src

   #+RESULTS:
   : [1] "data"   "mtcars" "Nile"

2) What is the data science work flow?
   1) collect data
   2) prepare data (clean, storing)
   3) analyze (transform, visualize)
   4) share insights (present, notebooks)

3) Print the first 5 records of ~mtcars~
   #+begin_src R
     head(mtcars,n=5)
   #+end_src

   #+RESULTS:
   :                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
   : Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
   : Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
   : Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
   : Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
   : Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2

** 4.1 Mon-11-Sep

*** Vote for Lyon College this week!

Put this in your daily calendar for daily vote through September 15!
From Lyon marketing:
#+begin_quote
Lyon College is a finalist for best four-year college in the AMP
(Arkansas Money and Politics) Best of 2023!

You can vote once per day through Sept. 15! Go Scots!

https://arkansasmoneypolitics.secondstreetapp.com/og/e404fba6-f03f-4d70-939a-b72afd1dcb42/gallery/396819790
#+end_quote

*** Introduction to R

- This and the lecture on data science in general are available via
  GitHub as PDF files ([[https://github.com/birkenkrahe/ds105/tree/main/pdf][link]]) - you have to download the ~raw~ file.

- Summary:
  1) Different ways of opening and running R: notebooks (Google Colab,
     Kaggle, DataCamp workspace, notable.io), Rterm/Rgui, and
     different IDEs (RStudio, replit.com, vscode.dev).
  2) Installing R locally and setting the ~$PATH~ variable (with admin
     rights).
  3) Keeping different versions of R on your computer because of the
     dominance of libraries (which are tied to specific versions).
  4) R demo with ~demo()~, e.g. ~demo(graphics)~ and ~help.start()~
     documentation with tutorial and package list (local).

- Becker, History of S, 2004,
  https://doi.org/10.1007/978-3-642-57991-2_6

** 4.2 Wed-13-Sep
*** Vote for Lyon College this week!

Put this in your daily calendar for daily vote through September 15!
From Lyon marketing:
#+begin_quote
Lyon College is a finalist for best four-year college in the AMP
(Arkansas Money and Politics) Best of 2023!

You can vote once per day through Sept. 15! Go Scots!

https://arkansasmoneypolitics.secondstreetapp.com/og/e404fba6-f03f-4d70-939a-b72afd1dcb42/gallery/396819790
#+end_quote

*** Projects!
*** DataCamp review

See R scratchbook in DataCamp workspace.

- What's EDA?
- What's Anscombe's quartet?
  #+begin_src R
    data(anscombe)
    str(anscombe)
  #+end_src
  #+begin_src R :results graphics output file :file ../img/anscombe.png
    plot(anscombe$x4,anscombe$y4,pch=16,col="red")
  #+end_src
  #+begin_src R
    summary(anscombe)
  #+end_src
- Visualization and color.
  #+begin_src R
    plot(mtcars$mpg ~ mtcars$wt, col=factor(mtcars$cyl), pch=16)
  #+end_src

*** Introduction to R part

** 5.1 Mon-18-Sep
*** Monthly summary

1. Python or R?
2. Histogram or scatterplot?
3. Generic or primitive function?
   #+begin_src R
     length(mtcars)
     summary(mtcars)
   #+end_src
4. Workspace or Jupyter?
5. Absolute or relative path?
6. RStudio or Rterm?
7. ~help~ or ~?~

*** Arithmetic with R

- Formula translator
- Logarithms, exponential function

** 5.2 Wed-20-Sep
*** Bitcoin club meets tonight Lyon 214
#+attr_latex: :width 400px
[[../img/bitcoin.png]]

*** Assignments

- Test 3 due Monday: includes DataCamp Intro to R chapter
- DataCamp assignment "Intro to basics in R" due Sunday

*** Arithmetic with R

Summary:
1) R environment settings - e.g. how many decimal digits are printed,
   or how many columns are printed, and many more, are stored in
   ~options()~, an R ~list~ type.
2) To access an options parameter, use ~$~, for example ~options$digits~
   for the number of decimal places displayed.
3) To change an options parameter, set the new value as an argument,
   for example ~options(digits=12)~ to increase the default accuracy
   from 6 to 12.
4) Special values ~Inf~ (Infinite) and ~NaN~ (Not a Number) are ~numeric~
   data. ~NA~ is a "missing value". You can remove NAs from many
   functions like ~mean~ using the ~na.rm=TRUE~ setting.
5) The ~summary~ function returns the number of ~NA~ values in your data.

** No meeting on Sep-22 go to [[https://www.lyon.edu/acteb-conference][ACTEB]] instead!

Extra credit: get a [[https://docs.google.com/document/d/1nya8YnjmXJRtSAi3VLCj-llfHgOie9RGd87rJ5H-YAI/edit?usp=sharing][signature]] from me for attending either the plenary
session (9am-12pm) of from a session chair (1-3 pm) for points!

Can't tell you not to go to other classes but if you have time
available, you should come to this conference to learn about AR's
economic future (AM) and hear research results in four concurrent
tracks on Economics, Education, Finance and Entrpreneurship (PM).

I'll be talking about "The Role of AI in Education". The concurrent
talks are very short (8-10 minutes with 1-2 minutes for questions).

A selection of interesting talks (judging from the title):
1) Economics: "Opportunity Costs of State Economic Development
   Spending: An Arkansas Case Study", Thomas Snyder (U Central AR)
2) Education: "The Role of AI in Education", Marcus Birkenkrahe (Lyon)
3) Finance: "Exchange-Traded Funds, Algorithmic Trading, and the
   Liquidity Illusion", Hannah Musso (U Central AR)
4) Entrepreneurship: "The Importance of Entrepreneurs is Growing",
   Terrance Farrier (UA Pine Bluff)

** 6.1 Mon-25-Sep
*** How are you getting prepared for Oct 5 Thursday?

- MB: research attending companies and let students know

*** Review test 3 ([[https://lyon.instructure.com/courses/1427/assignments/18890?display=full_width][Canvas]])

*** Vectors in R (notebook) - Part I

- Assigning objects with ~<-~ | assigning parameter values with ~=~
- ~class~ to check R object class (aka data type)
- Data types: ~numeric~, ~character~, ~logical~
- Emptying user-defined functions and variables with ~remove~

** 6.2. Wed-27-Sep: objects and assignments
*** Oct 5 Career fair update

Interesting new companies attending: [[https://fbijobs.gov/special-agents?msclkid=c1b3852ed152177c47d6e03abd619b10][FBI]], [[https://www.acxiom.com/careers/][Acxiom]].

*** Vectors in R ([[https://app.datacamp.com/workspace/w/dd82b27c-14f4-4964-8d04-8750599d4274/edit][notebook]])

- Everything is an object
- Assigning objects
- Creating vectors with =c=
- Base R basics
- Example: Down the ~Nile~
- Histograms and line plots

** 6.4 Fri-29-Sep: hist, seq
*** Vectors in R ([[https://app.datacamp.com/workspace/w/dd82b27c-14f4-4964-8d04-8750599d4274/edit][notebook]])

- More on the histogram (with =factor= arguments)
- Coercing strings to numbers, vectorization
- Creating vectors with the colon operator =:=
- Creating vectors with =seq= using stepwidth =by= or length of
  vector =length.out=.

** 7.1 Mon-2-Oct: vectors I
*** Solution to the histogram challenge?

[[https://github.com/birkenkrahe/ds105/blob/main/org/5_vectors.org#odd-histogram-with-][Solution]]: uses the [[https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/hist.html][documentation]] for =hist= and graphical output
manipulation for redrawing the axes (shown at the end of the doc).

*** Class review = test preview

1. Does =c= accept vectors as arguments?
   #+begin_src R
     v <- c(1,2)
     w <- c(v,3,4)
     w
   #+end_src

   #+RESULTS:
   : [1] 1 2 3 4

2. How does =mean= work and what does it do?
   #+begin_src R
     mean(1,2,3)
     mean(c(1,2,3))
     mean(c(1,NA,2,NA,3))
     mean(c(1,NA,2,NA,3), na.rm=TRUE)
   #+end_src

   #+RESULTS:
   : [1] 1
   : [1] 2
   : [1] NA
   : [1] 2

3. Which assignment operators does R have?
   #+begin_src R
     x <- 1
     x
     y = 1  # you should reserver = for parameters
     y
   #+end_src

   #+RESULTS:
   : [1] 1
   : [1] 1

4. Which data types do you already know?
   #+begin_src R
     is.numeric(3.14)
     is.integer(100) # is FALSE! Does not test for integer numbers
     is.logical(TRUE)
     is.character("Liberty")
   #+end_src

   #+RESULTS:
   : [1] TRUE
   : [1] FALSE
   : [1] "numeric"
   : [1] TRUE
   : [1] TRUE

5. What do you get from a histogram (e.g. Nile)?
   #+begin_src R :results output graphics file :file ../histogram.png
     ## frequency of continues numeric values in a bin (interval)
     ## number of years in which these values were observed
     hist(Nile)
   #+end_src

   #+RESULTS:
   [[file:../histogram.png]]

6. How can you load a dataset?
   #+begin_src R
     data()  # shows the list of ALL built-in datasets
                                             # MASS must be installed with install.packages("MASS")
     library(MASS)
   #+end_src

*** Vectors in R ([[https://app.datacamp.com/workspace/w/dd82b27c-14f4-4964-8d04-8750599d4274/edit][notebook]])

- Test practice: review R vectors
- Repetitions with =rep=

** 7.2 Wed, 4-Oct: vectors II
*** Vectors in R ([[https://app.datacamp.com/workspace/w/dd82b27c-14f4-4964-8d04-8750599d4274/edit][notebook]])

- Sorting and measuring vectors with =sort= and =length=
- Practice (lab) with practice file

** 7.3 Fri, 6-Oct: vectors III
*** Vectors in R ([[https://app.datacamp.com/workspace/w/dd82b27c-14f4-4964-8d04-8750599d4274/edit][notebook]])

- Naming vectors with =names=
- The =NULL= element (absence of a value, length 0)
- Indexing vectors
- Coercion of data types

** 8.1 Wed, 11-Oct: indexing

REMEMBER THE 2ND SPRINT REVIEW ON FRIDAY!
*** Vectors - preview and review

[[https://app.datacamp.com/workspace/w/7fc0edc8-6606-4a22-abf9-4bc628d90edc/edit][DataCamp workspace - vector_review.ipynb]]

1. What's =NULL=? How do you get it or use it?
   #+begin_src R
     print(length(NULL))
     print(class(NULL))
     print(length(NA))
     print(class(NA))
     lst <- list(a = 1, b = 2)
     print(lst$c)  # NULL since 'c' doesn't exist in the list
     print(is.null(lst$c))
   #+end_src

   #+RESULTS:
   : [1] 0
   : [1] "NULL"
   : [1] 1
   : [1] "logical"
   : NULL
   : [1] TRUE
2. What is ~c(FALSE, FALSE, FALSE) + 1~
   #+begin_src R
     c(FALSE, FALSE, FALSE) + 1
   #+end_src

   #+RESULTS:
   : [1] 1 1 1
3. An 'atomic' vector has only one data type. What is
   ~c("me",1,TRUE,Inf)~? How can you verify this?
   #+begin_src R
     foo <- c("me",1,TRUE,Inf)
     print(c(class(foo) == 'character',
             is.vector(foo)))
   #+end_src

   #+RESULTS:
   : [1] TRUE TRUE
4. How can you create the following pattern from "foo bar"?
   #+begin_example
   "foo" "foo" "foo" "bar" "bar" "bar"
   #+end_example
   #+begin_src R
     rep(c("foo","bar"), each=3)
   #+end_src

   #+RESULTS:
   : [1] "foo" "foo" "foo" "bar" "bar" "bar"
5. What is ~seq(from=100,to=200,by=-10)~
   #+begin_src R
                                             # stepwidth `by` must be positive if `to` value > `from` value
     seq(from=100,to=200,by=10)
   #+end_src

   #+RESULTS:
   :  [1] 100 110 120 130 140 150 160 170 180 190 200
6. How can you reverse ~seq(10,12,by=0.5)~?
   #+begin_src R
     foo <- seq(10,12,by=0.5)
     foo
     sort(foo,decreasing=TRUE)
   #+end_src

   #+RESULTS:
   : [1] 10.0 10.5 11.0 11.5 12.0
   : [1] 12.0 11.5 11.0 10.5 10.0
7. What happens when you add two vectors of unequal length?
   #+begin_src R
                                             # 1st vector is a multiple of the second vector
     c(100,200,300) + c(100)
                                             # 1st vector is a multiple of the second vector
     c(100,200,300,400) + c(100,200)
                                             # 1st vector is not a multiple of the second vector
     c(100,200,300) + c(100,200)
   #+end_src

   #+RESULTS:
   : [1] 200 300 400
   : [1] 200 400 400 600
   : [1] 200 400 400
   : Warning message:
   : In c(100, 200, 300) + c(100, 200) :
   :   longer object length is not a multiple of shorter object length
8. How can you retrieve the first row of the =mpg= column of =mtcars=?
   #+begin_src R
     ## What are we retrieving?
     print(mtcars$mpg[1])
     print(mtcars[1,1])
   #+end_src

   #+RESULTS:
   : [1] 21
   : [1] 21

9. If ~foo <- c(100,200,300)~, what are ~foo < 200~ and ~foo[foo<200]~?
   #+begin_src R
     foo <- c(100,200,300)
     foo < 200
     foo[foo < 200]
   #+end_src

   #+RESULTS:
   : [1]  TRUE FALSE FALSE
   : [1] 100
10. What is the sum of the last 2 elements of ~c(TRUE,TRUE,FALSE)~ and
    how would you extract these elements and =sum= them up in one line?
    #+begin_src R
      bar <- c(TRUE,TRUE,FALSE)
      bar
      sum(bar[-1])
    #+end_src

    #+RESULTS:
    : [1]  TRUE  TRUE FALSE
    : [1] 1

*** Indexing practice

[[https://app.datacamp.com/workspace/w/7fc0edc8-6606-4a22-abf9-4bc628d90edc/edit][DataCamp workspace - 5_indexing_practice.ipynb]]

1) Store a vector of these 10 values in ~foo~: ~7 5 6 1 2 10 8 3 8 2~

   #+begin_src R
     (foo <- c(7, 5, 6, 1, 2, 10, 8, 3, 8, 2))
     foo
   #+end_src

   #+RESULTS:
   :  [1]  7  5  6  1  2 10  8  3  8  2
   :  [1]  7  5  6  1  2 10  8  3  8  2

2) Show that the vector has 10 values using a function.

   #+begin_src R
     length(foo)
   #+end_src

   #+RESULTS:
   : [1] 10

3) Extract the fifth through seventh elements of ~foo~ and add ~5~ to
   these elements (the answer should be: ~7 15 13~).

   #+begin_src R
     foo[5:7]
     foo[5:7] + 5
   #+end_src

   #+RESULTS:
   : [1]  2 10  8
   : [1]  7 15 13

4) Create a logical flag vector with the command ~foo >= 5~

   #+begin_src R
     foo >= 5 # because of vectorisation, R tests every element of foo:
     foo[1] >= 5
     foo[4] >= 5
   #+end_src

   #+RESULTS:
   :  [1]  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE FALSE
   : [1] TRUE
   : [1] FALSE

5) Extract the elements of ~foo~ that are greater than or equal to 5 and
   store them in ~bar~

   #+begin_src R
     foo[c(TRUE, TRUE, TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,TRUE,FALSE)]
     bar <- foo[foo >= 5]
     foo; bar
   #+end_src

   #+RESULTS:
   : [1]  7  5  6 10  8  8
   :  [1]  7  5  6  1  2 10  8  3  8  2
   : [1]  7  5  6 10  8  8

6) Create a logical index vector named ~index~ that contains the indices
   of the elements of ~foo~ that are greater than or equal to 5 using
   the function ~which~

   #+begin_src R
     which(c(TRUE, TRUE, TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,TRUE,FALSE))
     index <- which(foo >= 5)
     index
     foo
   #+end_src

   #+RESULTS:

   : [1] 1 2 3 6 7 9
   : [1] 1 2 3 6 7 9
   :  [1]  7  5  6  1  2 10  8  3  8  2

7) Print those elements of ~foo~ that are smaller than ~5~ using ~index~

   #+begin_src R
     foo[-index]
   #+end_src

   #+RESULTS:
   : [1] 1 2 3 2

8) Print elements greater than or equal to 5

   #+begin_src R
     foo[index]
   #+end_src

   #+RESULTS:
   : [1]  7  5  6 10  8  8

** 8.2 Fri, 13-Oct: subsetting
*** Subsetting lecture / code along
[[../img/Rsuperhero.png]]

** Monthly summary
*** Status

- We're about 2 weeks behind schedule
- Covered Introduction to R: basics, vectors, matrices
- Special values, vector creation, indexing, subsetting

*** Summary of special values:

=Inf=, =NA=, =NaN=, =NULL=

*** Summary of functions:

| No. | FUNCTION     | PURPOSE                                   |
|-----+--------------+-------------------------------------------|
|   1 | c            | Create a vector                           |
|  31 | :            | Create regular sequence vector            |
|   2 | seq          | Create a vector as a numeric sequence     |
|   3 | rep          | Create a vector by repeating values       |
|   4 | format       | Format R object for prettyprinting        |
|   5 | class        | R object type                             |
|   6 | ls()         | User-defined objects in environment       |
|   7 | data()       | Pre-loaded datasets                       |
|   8 | as.numeric   | Convert to numeric type                   |
|   9 | is.numeric   | Check for numeric type                    |
|  10 | as.character | Convert to character type                 |
|  11 | is.character | Check for character type                  |
|  12 | as.logical   | Convert to logical type                   |
|  13 | is.logical   | Check for logical type                    |
|  14 | data.frame   | Convert to data frame                     |
|  15 | list         | Convert to list                           |
|  16 | r[e]m[ove]   | Remove objects from environment           |
|  17 | search       | Packages loaded into environment          |
|  18 | q[uit]       | Quit session                              |
|  19 | ts           | Create a time series                      |
|  20 | time         | Creates vector of times for time series   |
|  21 | str[ucture]  | Display R object structure                |
|  22 | head         | Display first few entries of R object     |
|  23 | tail         | Display last few entries                  |
|  24 | plot         | Generic plotting function                 |
|  25 | hist         | Generic histogram function                |
|  26 | methods      | List methods in function                  |
|  27 | []           | Index extractor for vectors               |
|  28 | =$=            | Vector accessor for dataframes, lists     |
|  29 | which        | Return TRUE indices of a logical object   |
|  30 | mode         | Storage mode (data type) of R object      |
|  31 | sort         | Sort vector values (generic)              |
|  32 | length       | Get or set vector length (generic)        |
|  33 | names        | Get or set names of an R object           |
|  34 | colnames     | Get or set column names                   |
|  35 | rownames     | Get or set row names                      |
|  36 | attributes   | Access an object's attributes             |
|  37 | args         | Display argument names and default values |
|  38 | prod         | Return product of all values              |
|  39 | sum          | Return sum of all values                  |
|  40 | summary      | Return statistical summary (generic)      |
|  41 | mean         | Return arithmetic average                 |
|  42 | matrix       | Create a matrix                           |

*** Extras (Google Space)

- [[https://www.datacamp.com/blog/how-to-use-workspace-ai-powered-notebooks-for-every-data-skill-level][Workspace AI-Powered Notebooks for Every Data Skill Level]].
- =is.integer= does not actually check if its argument is an integer.
- What are good questions for product owner/project teams?
- [[https://app.datacamp.com/learn/competitions/board-games][DataCamp competition]] in Python or R "which game to play?"

** 2nd sprint review
#+caption: Medieval colored woodcut of a grand hall with large wooden tables. Project teams from various regions, wearing medieval attire, stand around the tables presenting scrolls and parchments. One team highlights their methods using intricate diagrams and charts carved onto wooden boards. In the background, scholars and lords attentively listen, some taking notes on small scrolls. A large banner overhead reads 'Sprint Review'.
#+attr_latex: :width 400px
[[../img/2ndSprintReview.png]]

- Everybody *presents* their project status briefly and informally.
- Focus on the reviewed *literature* and your method or *approach*.
- Comment on you general *progress*, pride, change issues.
- Ask *questions* of the product owner and of other projects.
- *Upload* any material to your project folder in GDrive.

** Subsetting code along / practice ([[https://app.datacamp.com/workspace/w/ef97b586-175f-4314-9f94-a4034e1f1be2/edit][workspace]])

* DONE Part II: Data structures
** DONE 9.2 Wed, 18-Oct - subsetting =Nile=
- Subsetting code along continued
- Subsetting practice
** DONE 9.3 Fri, 20-Oct - subsetting =islands= & test 6
** DONE 10.1 Mon, 23-Oct
*** UAMS presentation Wednesday 25-Oct
Wed, 25-Oct meeting in Derby 209 (via Zoom)
#+attr_latex: :width 400px
[[../img/uams.jpg]]

As a follow-up from the Career fair, Dr. Clare Brown (BA psych Lyon
'07) and Dr. Mandana Rezaeiahari will present a research showcase and
give an introduction to the [[https://publichealth.uams.edu/academics/masters/academics-masters-mshcda/][UAMS healthcare analytics programs]]
(Master and Graduate certificate).

The meeting will take place on October 25, 9-9.50 AM via Zoom:
https://lyon-edu.zoom.us/j/83316335723 (no passcode) - or you can join
us in room 209 in the Derby building.

*** Assignment review and test preview
**** Review DataCamp lesson on =matrix= data structures:
1) How can you find out if an R object is a =matrix=?
   #+begin_src R
     M <- cbind(c(1,2), c(3,4))
     M
     is.matrix(M)
   #+end_src

   #+RESULTS:
   :      [,1] [,2]
   : [1,]    1    3
   : [2,]    2    4
   : [1] TRUE
2) How many data types can a =matrix= hold?
   #+begin_quote
   ONLY ONE because a matrix consists of vectors of the same length
   #+end_quote
3) Can you create this matrix?
   #+begin_example org
   :      [,1] [,2]
   : [1,]    1    2
   : [2,]    3    4
   #+end_example
   #+begin_src R
     M1 <- rbind(c(1,2),c(3,4)); M1
     M2 <- cbind(c(1,3),c(2,4)); M2
     matrix(1:4,nrow=2,byrow=TRUE)
   #+end_src

   #+RESULTS:
   :      [,1] [,2]
   : [1,]    1    2
   : [2,]    3    4
   :      [,1] [,2]
   : [1,]    1    2
   : [2,]    3    4
   :      [,1] [,2]
   : [1,]    1    2
   : [2,]    3    4
4) How can you check if two matrices are =identical=?
   #+begin_src R
     identical(M1,M2)  # exact equality
     all.equal(M1,M2)  # approximate equality
     M1 == M2  # through vectorization, this checks by element
   #+end_src

   #+RESULTS:
   : [1] TRUE
   : [1] TRUE
   :      [,1] [,2]
   : [1,] TRUE TRUE
   : [2,] TRUE TRUE

   What's the difference between =identical= and =all.equal=?
   #+begin_src R
     pi
     identical(pi,3.14)
     all.equal(pi,3.141593)
   #+end_src

   #+RESULTS:
: [1] 3.141593
: [1] FALSE
: [1] "Mean relative difference: 1.102658e-07"
5) Can you create this matrix (with named rows and columns)?
   #+begin_example org
   :     name  age
   : 001 "Joe" "22"
   : 002 "Jim" "25"
   #+end_example
   Solution:
   #+begin_src R
     names <- c("Joe","Jim")
     age <- c(22,25)
     names_age <- matrix(c(names,age),nrow=2)
     names_age
     colnames(names_age) <- c("name","age")
     names_age
     rownames(names_age) <- c("001","002")
     names_age
   #+end_src

   #+RESULTS:
   :      [,1]  [,2]
   : [1,] "Joe" "22"
   : [2,] "Jim" "25"
   :      name  age
   : [1,] "Joe" "22"
   : [2,] "Jim" "25"
   :     name  age
   : 001 "Joe" "22"
   : 002 "Jim" "25"
6) When you put named vectors in a =matrix=, what happens to them?
   #+begin_src R
     names2 <- c(name1="Joe",name2="Jim")
     names2
     age2 <- c(age1=22,age2=25)
     age2
     names_age2 <- matrix(c(names,age),nrow=2)
     names_age2
     colnames(names_age2)
     rownames(names_age2)
     str(names_age2)
     names_age2[1,1]
     names_age2[name1,age1]
   #+end_src

   #+RESULTS:
   #+begin_example
   name1 name2
   "Joe" "Jim"
   age1 age2
     22   25
        [,1]  [,2]
   [1,] "Joe" "22"
   [2,] "Jim" "25"
   NULL
   NULL
    chr [1:2, 1:2] "Joe" "Jim" "22" "25"
   [1] "Joe"
   Error: object 'name1' not found
   #+end_example
7) What does ~rowSums~ give you on the following matrix?
   #+begin_example org
   :     name  age
   : 001 "Joe" "22"
   : 002 "Jim" "25"
   #+end_example
   Solution:
   #+begin_src R
     rowSums(names_age2)
   #+end_src

   #+RESULTS:
   : Error in rowSums(names_age2) : 'x' must be numeric

   #+begin_src R

   #+end_src
8) How can you compute column sums on this matrix?
   #+begin_example org
   :      [,1] [,2]
   : [1,] "10" "101"
   : [2,] "20" "201"
   #+end_example

   Solution:
   #+begin_src R
     M3 <- matrix(as.character(c(10,20,101,201)),
                  nrow=2)
     M3
     M4 <- matrix(as.numeric(M3),
                  nrow=2)
     M4
     colSums(M4)  # this works
     colSums(M3)  # this does not
   #+end_src

   #+RESULTS:
   :      [,1] [,2]
   : [1,] "10" "101"
   : [2,] "20" "201"
   :      [,1] [,2]
   : [1,]   10  101
   : [2,]   20  201
   : [1]  30 302
   : Error in colSums(as.numeric(M3)) :
   :   'x' must be an array of at least two dimensions
9) How can you extract the first row and add it at the end?
   #+begin_example org
   :      [,1] [,2]
   : [1,]   10  101
   : [2,]   20  201
   #+end_example

   Solution:
   #+begin_src R
     M4
     M4[1,]
     rbind(M4,M4[1,])
   #+end_src

   #+RESULTS:
   :      [,1] [,2]
   : [1,]   10  101
   : [2,]   20  201
   : [1]  10 101
   :      [,1] [,2]
   : [1,]   10  101
   : [2,]   20  201
   : [3,]   10  101
10) How can you extract the diagonal from the following matrix as a
    vector ~1 1 1~? Tip: to generate this matrix, use =diag=.
    #+begin_example
    :      [,1] [,2] [,3]
    : [1,]    1    0    0
    : [2,]    0    1    0
    : [3,]    0    0    1
    #+end_example

    Solution:
    #+begin_src R
      M5 <- diag(3)
      M5
      M5[c(M5[1,1],M5[2,2],M5[3,3])]
    #+end_src

    #+RESULTS:
    :      [,1] [,2] [,3]
    : [1,]    1    0    0
    : [2,]    0    1    0
    : [3,]    0    0    1
    : [1] 1 1 1

*** DataCamp assignments published

- Oct 30: R data frames
- Nov 6: R lists
- Nov 13: Introduction to importing data in R
- Nov 20: Introduction to data visualization using ggplot2
- Nov 27: Python for R users - Basics

** DONE 10.2 Wed, 25-Oct -
**** Review subsetting exercises for =Nile= and =islands=:
[[https://app.datacamp.com/workspace/w/ef97b586-175f-4314-9f94-a4034e1f1be2/edit][notebook for Nile]] / [[https://app.datacamp.com/workspace/w/84f18411-f8a5-4b1d-82fd-41d9f7b08312/edit][notebook for islands]] (will post solutions)

** DONE 10.3 Fri, 27-Oct SCOTSFEST VISIT
#+attr_html: :width 400px
[[../img/scotsfest.png]]

**** Introduction to data frames (workspace)

** DONE 11.1 Mon, 30-Oct
**** Test 6 (matrices): are you using R?

- Tests are open book exams: all resources permitted
- The point is not memorization of rules or facts
- The point is engaging with the material and learning

**** Review DataCamp lesson on =factor= data structures:
1) What's a =factor=?
   #+begin_quote
   A =factor= is a statistical data type used to store ordinal or
   nominal categorical variables as a =vector= with =levels=.
   #+end_quote
2) How can you find out if an R object is a factor?
   #+begin_src R
     foo <- c("Joe", "Jim", "Job")
     foof <- factor(foo)
     foof
     is.factor(foof)
   #+end_src

   #+RESULTS:
   : [1] Joe Jim Job
   : Levels: Jim Job Joe
   : [1] TRUE
3) How many data types can a =factor= hold?
   #+begin_quote
   A =factor= is a vector data structure and can hold only one type of
   element, namely =character= type =levels=. Other types are coerced.
   #+end_quote
   #+begin_src R
     levels(foof)
     class(levels(foof))
   #+end_src

   #+RESULTS:
   : [1] "Jim" "Job" "Joe"
   : [1] "character"

   In lieu of a proof
   #+begin_src R
     boo <- factor(c(1,2,3))
     boo
     class(boo)  # output: factor
     class(levels(boo))   # output: character
   #+end_src

   #+RESULTS:
   : [1] 1 2 3
   : Levels: 1 2 3
   : [1] "factor"
   : [1] "character"
4) What type of categorical variables are these vector elements?
   #+begin_src R :results silent
     foo <- c("green", "red", "blue")
     bar <- c("small", "medium", "tall")
   #+end_src

   Solution:
   #+begin_src R
     ## foo is a nominal categorical variable and a character vector
     factor(foo)
     ## bar is an ordinal categorical variable and a character vector
     factor(bar)
   #+end_src

   #+RESULTS:
   : [1] green red   blue
   : Levels: blue green red
   : [1] small  medium tall
   : Levels: medium small tall
5) How can you turn ~bar~ into a =factor= named ~barf~ that is =ordered=?
   #+begin_src R
     barf1 <- factor(bar,
                     ordered=TRUE)
     barf1  # output: no levels defined, alphabetical order imposed
     barf2 <- factor(bar, levels = c("small", "medium", "tall"),
                     ordered=TRUE)
     barf2  # output: levels defined, ordered factor
   #+end_src

   #+RESULTS:
   : [1] small  medium tall
   : Levels: medium < small < tall
   : [1] small  medium tall
   : Levels: small < medium < tall
6) What happens to ~c(1,2,3)~ when I convert it to a =factor=?
   #+begin_src R
     baz <- factor(c(3,2,1,1,2,2,2,1000))
     baz
     class(levels(baz)) # factor levels are stored as character
     str(baz)
   #+end_src

   #+RESULTS:
   : [1] 3    2    1    1    2    2    2    1000
   : Levels: 1 2 3 1000
   : [1] "character"
   :  Factor w/ 4 levels "1","2","3","1000": 3 2 1 1 2 2 2 4
7) How can I sum up elements of ~factor(c(1,2,3))~?
   #+begin_src R
     ## the elements of a factor are (character) levels
     ## sum(factor) is not meaningful
     baz
     sum(as.numeric(baz)) # this is crazy because levels are categories
   #+end_src

   #+RESULTS:
   : [1] 3    2    1    1    2    2    2    1000
   : Levels: 1 2 3 1000
   : [1] 17

   #+begin_src R
     methods(sum)  # sum is not generic => MUST HAVE NUMBERS
   #+end_src

   #+RESULTS:
   : no methods found
8) How do =levels= of a =factor= and =names= of a =vector= differ?
   #+begin_src R
     vec <- c(one=100,two=200,three=300) # element names are labels
     factor(vec) # factor levels are the elements
   #+end_src

   #+RESULTS:
   :   one   two three
   :     1     2     3
   : Levels: 1 2 3
9) What is the (statistical) =summary= of a =factor= vector?
   #+begin_src R
     barf2  # ordered factor
     summary(barf2)
     barf3 <- c(barf2,barf2,barf2)  # ordered factor
     barf3
     summary(barf3)
   #+end_src

   #+RESULTS:
   : [1] small  medium tall
   : Levels: small < medium < tall
   :  small medium   tall
   :      1      1      1
   : [1] small  medium tall   small  medium tall   small  medium tall
   : Levels: small < medium < tall
   :  small medium   tall
   :      3      3      3

   #+begin_src R
     foo
     sum(as.numeric(foo))  # cannot coerce (NAs)
     qux <- c("100","200")  # can coerce
     sum(as.numeric(qux))
   #+end_src

   #+RESULTS:
   : [1] "green" "red"   "blue"
   : [1] NA
   : Warning message:
   : NAs introduced by coercion
   : [1] 300
10) Can you compare two factor levels?
    #+begin_src R
      ## you can compare factors if they are ordered
      barf2  # ordered 3-level factor
      joe <- barf2[2]
      jim <- barf2[3]
      if (joe > jim) {
        cat("Joe's taller than Jim\n")
      }  else {
        cat("Jim's taller than Joe\n")
      }

      qux <- factor(c("small","big")) # not ordered 2-level factor
      qux
      qux[1] > qux[2]  # output is NA
    #+end_src

    #+RESULTS:
    : [1] small  medium tall
    : Levels: small < medium < tall
    : Jim's taller than Joe
    : [1] small big
    : Levels: big small
    : [1] NA
    : Warning message:
    : In Ops.factor(qux[1], qux[2]) : '>' not meaningful for factors
11) What are =factor= values good for?
    #+begin_src R
      tg <- ToothGrowth
      str(tg)
      tg$supp[25:35]
    #+end_src

    #+RESULTS:
    : 'data.frame':     60 obs. of  3 variables:
    :  $ len : num  4.2 11.5 7.3 5.8 6.4 10 11.2 11.2 5.2 7 ...
    :  $ supp: Factor w/ 2 levels "OJ","VC": 2 2 2 2 2 2 2 2 2 2 ...
    :  $ dose: num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ...
    :  [1] VC VC VC VC VC VC OJ OJ OJ OJ OJ
    : Levels: OJ VC

    #+begin_src R :results graphics file output :file ../img/tg.png
                                              # plotting in 3d with factors
      boxplot(tg$len ~ tg$supp,
              xlab="",
              ylab="Toothlength [mm]",
              main="Toothlength of guinea pigs in Crampton (1947)",
              names=c("Orange Juice","Vitamin C"),
              horizontal=TRUE)
    #+end_src

    #+RESULTS:
    [[file:../img/tg.png]]

    #+begin_src R
      mt <- mtcars
      str(mt)
      mt$cyl <- factor(mt$cyl)
      str(mt)  # cyl vector is now a factor
    #+end_src

    #+RESULTS:
    #+begin_example
    'data.frame':       32 obs. of  11 variables:
     $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
     $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...
     $ disp: num  160 160 108 258 360 ...
     $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...
     $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
     $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
     $ qsec: num  16.5 17 18.6 19.4 17 ...
     $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
     $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
     $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
     $ carb: num  4 4 1 1 2 1 4 2 2 4 ...
    'data.frame':       32 obs. of  11 variables:
     $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
     $ cyl : Factor w/ 3 levels "4","6","8": 2 2 1 2 3 2 3 1 1 2 ...
     $ disp: num  160 160 108 258 360 ...
     $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...
     $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
     $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
     $ qsec: num  16.5 17 18.6 19.4 17 ...
     $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
     $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
     $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
     $ carb: num  4 4 1 1 2 1 4 2 2 4 ...
    #+end_example

    #+begin_src R :results graphics file output :file mtcol.png
      ## use the factor variable as the third [color] dimension
      ## pch is the point character symbol (default 1)
      ## cex is the size of the character symbol (default 1)
      plot(mt$mpg ~ mt$wt, col=mt$cyl, pch=18, cex=2)
    #+end_src

    #+RESULTS:
    [[file:mtcol.png]]

    #+RESULTS:[[file:mtcol.png]]

** DONE 11.2 Wed, 1-Nov

**** 3rd sprint review due on November 12 ([[https://lyon.instructure.com/courses/1427/assignments/20195][Canvas]])

- What's an abstract?
- How do you write an abstract?
- What does "complete and consistent references" mean?

**** IN PROGRESS Data frame practice (workspace) continued

** DONE 11.3 Fri, 3-Nov
**** Practice challenge: using the =subset= function
**** Finish data frame lecture - useful functions
** DONE 12.1 Mon, 6-Nov [no class]
** DONE 12.2 Wed, 8-Nov

**** Data frame review questions ([[https://app.datacamp.com/workspace/w/af196ae6-54cc-4d63-ae93-52eeb4be5866/edit][notebook]])

- creating data frames
- adding rows and columns to data frames
- extracting elements from data frames

** DONE 12.3 Fri, 10-Nov
**** Data frame review questions ([[https://app.datacamp.com/workspace/w/af196ae6-54cc-4d63-ae93-52eeb4be5866/edit][notebook]])

- renaming columns or rows of data frames
- subsetting data frames

**** Lists ([[https://app.datacamp.com/workspace/w/206b104e-97b9-465f-9ac2-8ab8c1754e11/edit][practice notebook]])
- why lists
- R as object-oriented and functional language

**** Timothy's plotting question

Timothy wanted to know how to plot two graphs with different y-scales
over one another so that the y-scales are aligned.

Create datasets:
#+begin_src R :results output
  df1 = data.frame(x=1:10,y1=seq(from=0,to=100,length.out=10))
  df2 = data.frame(x=1:10,y2=seq(from=-10,to=200,length.out=10))

  df1
  df2
#+end_src

#+RESULTS:
#+begin_example
    x        y1
1   1   0.00000
2   2  11.11111
3   3  22.22222
4   4  33.33333
5   5  44.44444
6   6  55.55556
7   7  66.66667
8   8  77.77778
9   9  88.88889
10 10 100.00000
    x        y2
1   1 -10.00000
2   2  13.33333
3   3  36.66667
4   4  60.00000
5   5  83.33333
6   6 106.66667
7   7 130.00000
8   8 153.33333
9   9 176.66667
10 10 200.00000
#+end_example

Plot the datasets next to one another
#+begin_src R :results output graphics file :file ../img/xy1.png
  ## 1 x 2 frame, use [s]quare plotting region
  par(mfrow=c(1,2), pty='s') # 1 x 2 frame, use [s]quare plotting region

  ## plot first dataset - separate y-axis
  plot(df1$x, df1$y1, type = "l", col = "blue",
       xlab = "X-axis", ylab = "Y-axis for Dataset 1",
       main='First dataset:\nseparate y-axis')

  ## plot second dataset - separate y-axis
  plot(df2$x, df2$y2, type = "l", col = "red",
       xlab = "X-axis", ylab = "Y-axis for Dataset 21",
       main='Second dataset:\nseparate y-axis')
#+end_src

#+RESULTS:
[[file:../img/xy1.png]]

Let's plot them next to one another but with aligned y-scales. To do
that, we add the parameter =ylim= and set it to the larger of the two
intervals:
#+begin_src R :results output graphics file :file ../img/xy2.png
  ## 1 x 2 frame, use [s]quare plotting region
  par(mfrow=c(1,2), pty='s') 

  ## plot first dataset - aligned y-axis
  plot(df1$x, df1$y1, type = "l", col = "blue", ylim = c(-10,200),
       xlab = "X-axis", ylab = "Y-axis for Dataset 1 and 2",
       main='First dataset:\naligned y-scales')

  ## Plot the second dataset with its own y-axis
  plot(df2$x, df2$y2, type = "l", col = "red", ylim = c(-10, 200),
       xlab="",ylab="",main='Second dataset:\naligned y-scales')
  #+end_src

#+RESULTS:
[[file:../img/xy2.png]]

Now we remove all x-y-axis information from the second graph and plot
it on top of the first - =par(new=True)= enables that:
#+begin_src R :results output graphics file :file ../img/xy3.png
  ## 1 x 1 frame
  par(mfrow=c(1,1))

  ## plot first dataset with y-axis and labels
  plot(df1$x, df1$y1, type = "l", col = "blue", ylim = c(-10,200),
       xlab = "X-axis", ylab = "Y-axis for Dataset 1 and 2",
       main='First and second dataset')

  ## allow for the next plot to be plotted on top of the first
  par(new=TRUE)

  ## Plot the second dataset without labels on top of the first
  plot(df2$x, df2$y2, type = "l", col = "red", ylim = c(-10, 200),
       xaxt = "n", yaxt = "n", xlab = "", ylab = "", ann = FALSE,
       main="")

#+end_src

#+RESULTS:
[[file:../img/xy3.png]]


#+begin_src R :results output file graphics :file ../img/na.png
  df = data.frame(1:10,c(rep(NA,4),5:10))
  df
  summary(df)
  plot(df)
#+end_src

#+RESULTS:
[[file:../img/na.png]]

Other things Timothy learnt later on:
- Difference between base R and "Tidyverse" complexity (=dplyr=)
- How to aggregate (group) values in a new column using =aggregate=

* Part III: Visualization, import, shell, date and time
** Week 13 - Data import and barplots

- 3rd sprint review due Nov 12
- DataCamp review: [[https://campus.datacamp.com/courses/introduction-to-importing-data-in-r/importing-data-from-flat-files-with-utils?ex=1][importing data ]] ([[../../admin/RoamNotes/20220601200828-datacamp.org][Org]], [[https://app.datacamp.com/workspace/w/25fe01ee-f296-48ed-bf6d-f1348944970f/edit][workspace]])
- [[../9_barplots.org][Barplots]] (workspace)

** Week 14 - Visualization with ggplot2

- DataCamp review: visualization with ggplot2 (workspace)
- ggplot2 lecture & practice (workspace)
  
** Week 15 - Python vs. R & histograms

- DataCamp review: Python for R users - the basics (workspace)
- Histogram lecture & practice (workspace)

* Week 16 - Project presentations
